/* ==========================================================================
	Site Transition
	Apply transitions consistently across the project
========================================================================== */
@mixin site-transition($type:all, $speed:300ms) {
	transition: $type $speed $standard-curve;
}


/* ==========================================================================
	Variable Spacing (v-spacing)
	Use with values set in _config.scss
========================================================================== */
$resolution-range-bottom: map-get($breakpoints, xsmall);
$resolution-range-top: map-get($breakpoints, xxlarge);

@function get-linear-size($mobile-size, $desktop-size) {
	$a: ($desktop-size - $mobile-size) / ( $resolution-range-top - $resolution-range-bottom );
	$b: -$a * $resolution-range-bottom;

	@return calc(#{$a} * 100vw + #{$b + $mobile-size});
}

@mixin v-spacing($field, $mobile-size, $desktop-size) {
	#{$field}: get-linear-size($mobile-size, $desktop-size);

	@include media(">xlarge") {
		#{$field}: $desktop-size;
	}

	@include media("<=small") {
		#{$field}: $mobile-size;
	}
}


/* ==========================================================================
	Tracking
	Convert XD, illustrator, indesign and
	photoshop tracking into letter spacing.
========================================================================== */
@function tracking( $target ) {

	@return ($target / 1000) * 1em;
}

@mixin tracking( $target ) {
	letter-spacing: tracking($target);
}


/* ============================================================================================================
	Line Height Crop (lhCrop)
	Removes the additional line height from top of text - https://codyhouse.co/blog/post/line-height-crop
	Use to make sure the top of your text lines up with other elements along side it.
	Enter a unitless line height (same as the type line hight)
============================================================================================================= */
@mixin lhCrop($line-height-top, $line-height-bottom) {

	@if $line-height-top {

		&::before {
			content: "";
			display: block;
			height: 0;
			width: 0;
			margin-top: calc((#{var(--lh-t-adjust)} - #{$line-height-top}) * 0.5em);
		}
	}

	@if $line-height-bottom {

		&::after {
			content: "";
			display: block;
			height: 0;
			width: 0;
			margin-top: calc((#{var(--lh-b-adjust)} - #{$line-height-bottom}) * 0.5em);
		}
	}

}


/* ===========================================================================================
	Unitless Line Height
	Converts a pixel, percentage, rem or em value to a unitless value based on a given font size.
	Ideal for working out unitless line heights.
	Stolen from Foundation https://get.foundation/sites/docs/sass-functions.html#unitless-calc

	@param {Number} $value - Value to convert to a unitless line height
	@param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size
	@return {Number} - Unitless number
=========================================================================================== */
@function line-height($value, $base) {
	// First, lets convert our $base to pixels
	// If the base font size is a %, then multiply it by 16px

	@if unit($base) == "%" {
		$base: ($base / 100%) * 16px;
	}

	@if unit($base) == "rem" {
		$base: strip-unit($base) * 16px;
	}

	@if unit($base) == "em" {
		$base: strip-unit($base) * 16px;
	}

	// Now let's convert our value to pixels too
	@if unit($value) == "%" {
		$value: ($value / 100%) * $base;
	}

	@if unit($value) == "rem" {
		$value: strip-unit($value) * $base;
	}

	@if unit($value) == "em" {
		$value: strip-unit($value) * $base;
	}

	// 'px'
	@if unit($value) == "px" {

		@return strip-unit($value) / strip-unit($base);
	}

	// assume that line-heights greater than 10 are meant to be absolute in 'px'
	@if unitless($value) and ($value > 10) {

		@return $value / strip-unit($base);
	}

	@return $value;
}


/* ==================================================================================
	Removes the unit (e.g. px, em, rem) from a value, returning the number only.

	@param {Number} $num - Number to strip unit from.
	@returns {Number} The same number, sans unit.
=================================================================================== */
@function strip-unit($num) {

	@return $num / ($num * 0 + 1);

}


/* ==================================================================================
	used to create resonsive type

	@param {Number} $min-font-size - Number of the miniumum font size with units.
	@param {Number} $max-font-size - Number of the maximum font size with units.
	@param {Number} $line-height - Number of the lineheight with units.
	@returns font size using the v-space mixin and a unitless lineheight.
=================================================================================== */
@mixin v-type($min-font-size, $max-font-size, $line-height) {

	// to-do: decide lhCrop is a good thing to add here?
	$unitless-line-height : line-height($line-height, $max-font-size);

	// we don't need variable fonts if the min and max font sizes are the same
	@if $max-font-size == $min-font-size {
		font-size: $max-font-size;
	} @else {

		@include v-spacing(font-size, $min-font-size, $max-font-size);
	}

	line-height: $unitless-line-height;
}

/* ==================================================================================
	used to retreive varbailes from the $site-ccs-variables array

	$type = type is the name you set for your nested varaible array
	$size = is the nested variable you wish to get.
	@returns the value of teh specified variable
=================================================================================== */
@function site-css-variables($type, $size) {

	@return map-get(map-get($site-ccs-variables, $type), $size);
}

/* ==================================================================================
	loops through varbailes from the $site-ccs-variables array & out put css var

	$value = used to get the correct value
=================================================================================== */
@mixin site-css-var-loop($value) {

	@each $site-key, $site-top-level in $site-ccs-variables {

		@each $site-child-key, $site-value in $site-top-level {

			@if $site-child-key == $value {

				--site-#{$site-key}: #{site-css-variables(#{$site-key}, $size: #{$site-child-key})};
			}
		}
	}
}

/* ==================================================================================
	used to retreive css var based on the breakpoint passed

	$breakpoint = used to specify media query
=================================================================================== */
@mixin site-get-var-loop($breakpoint) {

	@if $breakpoint == "xsmall" {

		@include site-css-var-loop($breakpoint);

	} @else {

		@include media(">=#{$breakpoint}") {

			@include site-css-var-loop($breakpoint);
		}
	}
}

/* ==================================================================================
	SIBLING FADE: fade out siblings around a hovered item
=================================================================================== */
@mixin sibling-fade() {
	// Prevents :hover from triggering in the gaps between items
	pointer-events: none;

	// Bringing the child items back in, even though the parent is hidden
	> * {
		pointer-events: auto;
		transition: 600ms	opacity 100ms $standard-curve;
	}

	// Fade out all items when the parent is hovered
	// Fade in the currently hovered item
	@media (hover: hover) {

		&:hover > * {
			opacity: 0.4;
		}

		> *:hover {
			opacity: 1;
			transition-delay: 0ms, 0ms;
		}
	}
}

/* ==================================================================================
	close icon mixin (needs somehwere else to sit)
=================================================================================== */
@mixin close-icon() {
	width: 20px;
	height: 20px;
	background-color: #f00;
	cursor: pointer;
	transition: 300ms transform $standard-curve;

	&::before,
	&::after {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		width: 20px;
		height: 2px;
		background-color: $c-black;
	}

	&::before {
		transform: translate(-50%, -50%) rotate(45deg);
	}

	&::after {
		transform: translate(-50%, -50%) rotate(-45deg);
	}

	@media (hover: hover) {

		&:hover {
			transform: rotate(90deg);
		}
	}
}

@mixin dot($dark: true) {
	width: 3px;
	height: 3px;
	border-radius: 50%;
	display: inline-flex;
	justify-content: center;
	position: relative;
	top: -2px;

	@if $dark == true {
		background-color: $c-black;
	} @else {
		background-color: $c-white;
	}
}
